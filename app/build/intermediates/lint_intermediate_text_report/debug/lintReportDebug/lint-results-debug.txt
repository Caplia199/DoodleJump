/Users/a.rodionov/DoodleJump/app/build.gradle.kts:13: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk = 34
        ~~~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application or sdk runs on a version of Android that is more
   recent than your targetSdkVersion specifies that it has been tested with,
   various compatibility modes kick in. This ensures that your application
   continues to work, but it may look out of place. For example, if the
   targetSdkVersion is less than 14, your app may get an option button in the
   UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/Users/a.rodionov/DoodleJump/app/build.gradle.kts:8: Warning: A newer version of compileSdkVersion than 34 is available: 35 [GradleDependency]
    compileSdk = 34
    ~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/build.gradle.kts:39: Warning: A newer version of androidx.core:core-ktx than 1.12.0 is available: 1.16.0 [GradleDependency]
    implementation("androidx.core:core-ktx:1.12.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/build.gradle.kts:40: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.1 [GradleDependency]
    implementation("androidx.appcompat:appcompat:1.6.1")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/build.gradle.kts:41: Warning: A newer version of com.google.android.material:material than 1.10.0 is available: 1.12.0 [GradleDependency]
    implementation("com.google.android.material:material:1.10.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/build.gradle.kts:42: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/build.gradle.kts:44: Warning: A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.2.1 [GradleDependency]
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/build.gradle.kts:45: Warning: A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.6.1 [GradleDependency]
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/a.rodionov/DoodleJump/app/src/main/AndroidManifest.xml:18: Warning: Expecting android:screenOrientation="unspecified" or "fullSensor" for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices [LockedOrientationActivity]
            android:screenOrientation="portrait"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "LockedOrientationActivity":
   The <activity> element should not be locked to any orientation so that
   users can take advantage of the multi-window environments and larger
   screens available on Android. To fix the issue, consider declaring the
   corresponding activity element with `screenOrientation="unspecified"`or
   fullSensor attribute.

   https://developer.android.com/topic/arc/window-management

/Users/a.rodionov/DoodleJump/app/src/main/AndroidManifest.xml:18: Warning: Should not restrict activity to fixed orientation. This may not be suitable for different form factors, causing the app to be letterboxed. [DiscouragedApi]
            android:screenOrientation="portrait"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DiscouragedApi":
   Discouraged APIs are allowed and are not deprecated, but they may be unfit
   for common use (e.g. due to slow performance or subtle behavior).

/Users/a.rodionov/DoodleJump/app/src/main/res/values/themes.xml:14: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
                                            ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/Users/a.rodionov/DoodleJump/app/src/main/res/layout/activity_main.xml:5: Warning: Possible overdraw: Root element paints background @color/sky_blue with a theme that also paints a background (inferred theme is @style/Theme_DoodleJump) [Overdraw]
    android:background="@color/sky_blue">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

/Users/a.rodionov/DoodleJump/app/src/main/res/values/colors.xml:3: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/src/main/res/values/colors.xml:12: Warning: The resource R.color.blue appears to be unused [UnusedResources]
    <color name="blue">#FF2196F3</color>
           ~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/src/main/res/values/colors.xml:14: Warning: The resource R.color.orange appears to be unused [UnusedResources]
    <color name="orange">#FFFF9800</color>
           ~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

   Available options:

   **skip-libraries** (default is true):
   Whether the unused resource check should skip reporting unused resources in libraries.

   Many libraries will declare resources that are part of the library surface; other modules depending on the library will also reference the resources. To avoid reporting all these resources as unused (in the context of a library), the unused resource check normally skips reporting unused resources in libraries. Instead, run the unused resource check on the consuming app module (along with `checkDependencies=true`).

   However, there are cases where you want to check that all the resources declared in a library are used; in that case, you can disable the skip option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UnusedResources">
           <option name="skip-libraries" value="true" />
       </issue>
   </lint>
   ```

/Users/a.rodionov/DoodleJump/app/src/main/res/mipmap-hdpi/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
/Users/a.rodionov/DoodleJump/app/src/main/res/mipmap-hdpi/ic_launcher_round.xml:2: Warning: The application adaptive roundIcon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/Users/a.rodionov/DoodleJump/app/src/main/java/com/example/doodlejump/GameView.kt:336: Warning: Use the KTX extension function Canvas.withTranslation instead? [UseKtx]
        canvas.save()
        ~~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/src/main/java/com/example/doodlejump/MainActivity.kt:83: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
            getSharedPreferences("DoodleJump", MODE_PRIVATE)
            ^

   Explanation for issues of type "UseKtx":
   The Android KTX libraries decorates the Android platform SDK as well as
   various libraries with more convenient extension functions available from
   Kotlin, allowing you to use default parameters, named parameters, and
   more.

   Available options:

   **remove-defaults** (default is true):
   Whether to skip arguments that match the defaults provided by the extension.

   Extensions often provide default values for some of the parameters. For example:
   ```kotlin
   fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String> { return Files.readAllLines(this, charset) }
   ```
   This lint check will by default automatically omit parameters that match the default, so if your code was calling

   ```kotlin
   Files.readAllLines(file, Charset.UTF_8)
   ```
   lint would replace this with
   ```kotlin
   file.readLines()
   ```
   rather than

   ```kotlin
   file.readLines(Charset.UTF_8
   ```
   You can turn this behavior off using this option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="remove-defaults" value="true" />
       </issue>
   </lint>
   ```

   **require-present** (default is true):
   Whether to only offer extensions already available.

   This option lets you only have lint suggest extension replacements if those extensions are already available on the class path (in other words, you're already depending on the library containing the extension method.)

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="require-present" value="true" />
       </issue>
   </lint>
   ```

/Users/a.rodionov/DoodleJump/app/src/main/java/com/example/doodlejump/GameView.kt:316: Warning: Custom view GameView overrides onTouchEvent but not performClick [ClickableViewAccessibility]
    override fun onTouchEvent(event: MotionEvent): Boolean {
                 ~~~~~~~~~~~~

   Explanation for issues of type "ClickableViewAccessibility":
   If a View that overrides onTouchEvent or uses an OnTouchListener does not
   also implement performClick and call it when clicks are detected, the View
   may not handle accessibility actions properly. Logic handling the click
   actions should ideally be placed in View#performClick as some accessibility
   services invoke performClick when a click action should occur.

/Users/a.rodionov/DoodleJump/app/src/main/res/layout/activity_main.xml:45: Warning: LinearLayout-11 can overlap @id/gameView if LinearLayout-11 grows due to localized text expansion [RelativeOverlap]
    <LinearLayout
     ~~~~~~~~~~~~
/Users/a.rodionov/DoodleJump/app/src/main/res/layout/activity_main.xml:45: Warning: LinearLayout-11 can overlap LinearLayout-7 if LinearLayout-11 grows due to localized text expansion [RelativeOverlap]
    <LinearLayout
     ~~~~~~~~~~~~

   Explanation for issues of type "RelativeOverlap":
   If relative layout has text or button items aligned to left and right sides
   they can overlap each other due to localized text expansion unless they
   have mutual constraints like toEndOf/toStartOf.

0 errors, 22 warnings
